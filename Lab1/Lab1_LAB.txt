##
## Program1.asm - prints out "hello world"
##
##	a0 - points to the string
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start 

__start:		# execution starts here
	la $a0,str	# put string address into a0
	li $v0,4	# system call to print
	syscall		#   out a string

	li $v0,10  # system call to exit
	syscall	#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
str:	.asciiz "Hello <TA >\n"
n:	.word	10

##
## end of file Program1.asm

#########################################

#		text segment		#
#						#
#################################

	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	mul $t0,$v0,9	# to convert,multiply by 9,
	div $t0,$t0,5	# divide by 5, then
	add $t0,$t0,32	# add 32

	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t0	# print integer result
	li $v0,1		# using syscall 1
	syscall

	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
prompt:	.asciiz "Enter temperature (Celsius): "
ans1:	.asciiz "The temperature in Fahrenheit is "
endl:	.asciiz "\n"

##
## end of file Program2.asm

######################################

##
##	Program3.asm is a loop implementation
##	of the Fibonacci function
##        

#################################
#					 	#
#		text segment		#
#						#
#################################
.data
enter: .asciiz "Enter number:"
endl:	.asciiz "\n"

.text		
.globl __start
 
__start:
	la $a0,enter
	li $v0,4
	syscall
	li $v0,5
	syscall		# execution starts here
	addi $a0,$v0,0	
	
	addi $s2,$zero,2
	div $a0,$s2
	mfhi $t2
	odd:
		beq $t2,$zero,even
		jal fib	
		j exit
	even:
		jal fact
		j exit
	exit:
		
	move $a0,$v0	# print result
	li $v0, 1
	syscall

	la $a0,endl	# print newline
	li $v0,4
	syscall

	li $v0,10
	syscall		# bye bye

#------------------------------------------------


fib:	
	move $v0,$a0	# initialise last element
	blt $a0,2,done	# fib(0)=0, fib(1)=1

	li $t0,0	# second last element
	li $v0,1	# last element

loop:	add $t1,$t0,$v0	# get next value
	move $t0,$v0	# update second last
	move $v0,$t1	# update last element
	sub $a0,$a0,1	# decrement count
	bgt $a0,1,loop	# exit loop when count=0
done:	jr $ra

#################################
fact:
	addi $a1,$zero,2 
	addi $a2,$zero,1 #result
	beq $a0,$a2,done2 #for 1 fact
	addi $a0,$a0,1
	loopfact:
		beq $a1,$a0,done2
		mul $a2,$a2,$a1
		addi $a1,$a1,1	
		j loopfact
		done2:
		addi $v0,$a2,0
	jr $ra
#################################


##
## end of Program3.asm

###################################

.data
sizeText: .asciiz "Enter size: "
elementText: .asciiz "Enter element: "
menuText: .asciiz "1)sum of numbers less than, 2)sum of numbers out of range\n3)num of occurance division, 0)Exit\nEnter Option: "
invalidText: .asciiz "\n*Invalid Choice Entered*"
shouldgreaterText: .asciiz "\n*Second number must be greater than the first number*\n"
space: .asciiz " "
newLine: .asciiz "\n"
.text
	.globl _start
_start:

la $a0,sizeText
li $v0,4
syscall

li $v0,5
syscall
addi $s0,$v0,0 #s0 : size
addi $t0,$s0,0 
mul $t0, $v0, 4     # int is 4 bytes
addi $a0, $t0,0     # allocate the size of the array in the heap
li $v0, 9           # now, $v0 has the address of allocated memory
syscall
addi $s1,$v0,0      # $s1 : address of array to be stored
addi $t0,$s1,0      # $t0 : address of array to be used
addi $t1,$zero,0 #index
create:
	beq $t1,$s0,done
	la $a0,elementText
	li $v0,4
	syscall

	li $v0,5
	syscall
	sw $v0,0($t0)
	
	addi $t0,$t0,4
	addi $t1,$t1,1
	j create
	
	done:
	
addi $t0,$s1,0
addi $t1,$zero,0 #index
jal print

####################
menu:	#s3 is choice
	la $a0,newLine
	li $v0,4
	syscall
	la $a0,menuText
	li $v0,4
	syscall
	li $v0,5
	syscall
	addi $s3,$v0,0

	case1: #sum of elements less than given number
	 addi $t2,$zero,1
	 bne $s3,$t2,case2
	 
	 la $a0,elementText
	 li $v0,4
	 syscall
	 li $v0,5
	 syscall
	 addi $a2,$v0,0 #entered number
	 addi $a1,$s1,0 #a1 hold first address in array
	 jal func1
	 addi $a0,$v0,0
	 li $v0,1
	 syscall
	j menu
	
	case2:
	 addi $t2,$zero,2
	 bne $s3,$t2,case3
	 
	 la $a0,elementText
	 li $v0,4
	 syscall
	 li $v0,5
	 syscall
	 addi $a2,$v0,0 #entered number
	 j pass
	 eror2:
	 la $a0,shouldgreaterText
	 li $v0,4
	 syscall
	 pass:
	 la $a0,elementText
	 li $v0,4
	 syscall
	 li $v0,5
	 syscall
	 addi $a3,$v0,0 #entered number
	 blt $a3,$a2,eror2
	 addi $a1,$s1,0 #a1 hold first address in array
	 jal func2	
	 addi $a0,$v0,0
	 li $v0,1
	 syscall
	 
	j menu
	 
	case3: #divisible
	 addi $t2,$zero,3
	 bne $s3,$t2,case0
	 
	 la $a0,elementText
	 li $v0,4
	 syscall
	 li $v0,5
	 syscall
	 addi $a2,$v0,0 #entered number
	 beq $a2,$zero,case3
	 addi $a1,$s1,0 #a1 hold first address in array
	 jal func3
	 addi $a0,$v0,0
	 li $v0,1
	 syscall
	 
	j menu
	 
	case0:
	 beq $s3,$zero,exit
	 #invalid case
	 la $a0,invalidText
	 li $v0,4
	 syscall
	 j menu

	 exit:
######################
	 

li $v0,10
syscall 

#####################
func1:
	addi $t0,$zero,0 #t0 : sum
	addi $t1,$zero,0 #t1 : index
	addi $a2,$a2,-1 #if equal not add it 
	sum:
		beq $t1,$s0,done1 #if index equals size of array
		lw $t2,0($a1)
		bgt $t2,$a2,bigger
		add $t0,$t0,$t2	
		bigger:	
		addi $a1,$a1,4 #increment address
		addi $t1,$t1,1	
		j sum
		done1:
		addi $v0,$t0,0	
	jr $ra

####################
func2:
	addi $t0,$zero,0 #t0 : sum
	addi $t1,$zero,0 #t1 : index
	sum2:
	beq $t1,$s0,done2 #if index equals size of array
	lw $t2,0($a1)
	blt $t2,$a2,outrange
	bgt $t2,$a3,outrange
	j a
	outrange:	
	add $t0,$t0,$t2	
	a:
	addi $a1,$a1,4 #increment address
	addi $t1,$t1,1	
	j sum2
	done2:
	addi $v0,$t0,0	
	
	jr $ra
#################### 	

func3:
	addi $t0,$zero,0 #t0 : occurance
	addi $t1,$zero,0 #t1 : index
	divisible:
		beq $t1,$s0,done3 #if index equals size of array
		lw $t2,0($a1)
		div $t2,$a2
		mfhi $t3 #remainder 
		bne $t3,$zero,notdivisible
		addi $t0,$t0,1
		notdivisible:	
		addi $a1,$a1,4 #increment address
		addi $t1,$t1,1	
		j divisible
		done3:
		addi $v0,$t0,0	
	jr $ra
####################
print:
	beq $t1,$s0,printed
	lw $t2,0($t0)
	addi $a0,$t2,0
	li $v0,1
	syscall
	la $a0,space
	li $v0,4
	syscall
	addi $t0,$t0,4
	addi $t1,$t1,1
	j print
	printed:
	
	jr $ra
	
	
################################

.data
textA: .asciiz "enter A: "
textB: .asciiz "enter B: "
textC: .asciiz "enter C: "
textD: .asciiz "enter D: "
textE: .asciiz "enter E: "
newLine: .asciiz "\n"

.text
  .globl _start
 _start:
 	
 	la $a0,textA
 	li $v0,4
 	syscall
 	
 	li $v0,5
 	syscall
 	addi $s0,$v0,0
 	
 	la $a0,newLine
 	li $v0,4
 	syscall
 	
 	la $a0,textB
 	li $v0,4
 	syscall
 
 	li $v0,5
 	syscall
 	addi $s1,$v0,0
 	
 	la $a0,newLine
 	li $v0,4
 	syscall
 	
 	la $a0,textC
 	li $v0,4
 	syscall
 
 	li $v0,5
 	syscall
 	addi $s2,$v0,0
 	
 	la $a0,newLine
 	li $v0,4
 	syscall
 	
 	la $a0,textD
 	li $v0,4
 	syscall
 
 	li $v0,5
 	syscall
 	addi $s3,$v0,0
 	
 	la $a0,newLine
 	li $v0,4
 	syscall
 	
 	la $a0,textE
 	li $v0,4
 	syscall
 
 	li $v0,5
 	syscall
 	addi $s4,$v0,0
 	
 	la $a0,newLine
 	li $v0,4
 	syscall
 	
 	addi $t0,$zero,0 #t0 is result
 	
 	mul $t0,$s0,$s1
 	div $t0,$s2
 	mfhi $t0
 	sub $t1,$s4,$s3
 	mul $t0,$t0,$t1
 	
 	addi $a0,$t0,0
 	li $v0,1
 	syscall
 	
 	li $v0,10
 	syscall
 	
 	
 	

