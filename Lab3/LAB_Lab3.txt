.data 

number: .asciiz  "10000111101101000101000101101000"
number2: .asciiz  "0000000000000000000000000000000"
pattern: .asciiz "1"
space: .asciiz " "
line: .asciiz "\n"
notsametxt: .asciiz "not same pattern"
sametxt: .asciiz "same pattern"

.text

 .globl _start
 
 _start:
 
 size:
	lbu $s1,pattern($s0) #s0: string lenght
	beq $s1,$zero,done
	addi $s0,$s0,1
	j size
	done:
 
 
 la $a1,number
 la $a0,pattern
 add $a2,$zero,$s0 #enter n here
jal checkpattern
 
 li $v0,10
 syscall
 
 ################################
 
 checkpattern:
 
 
 	addi $t2,$zero,0 #index
	addi $t1,$zero,0 #counter
	addi $t3,$zero,31
	
	reverse:
		beq $t1,32,out #t2 i t1 size
		lbu  $t0,number($t3)
	        sb $t0,number2($t2)
	       addi $t2,$t2,1  
	       addi $t3,$t3,-1
	       addi $t1,$t1,1   #counter
	   j reverse
	   
	  out:
	  
	  
	addi $t0,$zero,1
 	addi $t1,$zero,0
 	addi $t2,$zero,0
 	addi $t3,$zero,0
 	addi $t9,$zero,32
 	div $t9,$a2
 	mflo $t9
 	addi $t9,$t9,1
	mfhi $t8
 	
 outerwhile:
 	beq $t9,$t0,exitouter	
	mul $t2,$t0,$a2
	addi $t2,$t2,-1
 	while: 
 		beq $t1,$a2,exit #if equal to n 
 		lbu  $t3,number2($t2)
 		lbu  $t4,pattern($t1)
 		bne $t4,$t3,notsame
 		
 		j same
 		notsame:
		addi $t7,$zero,1
		same:
 		
 		addi $a0,$t3,0
 		li $v0,11
 		syscall	
 		
 		
 		addi $t2,$t2,-1
 		addi $t1,$t1,1	
 		
 		j while
 		
 		exit:
 		
 		la $a0,space
 		li $v0,4
 		syscall
 		
 		beq $t7,$zero,sametext
 		###farklı
 		la $a0,notsametxt
 		li $v0,4
 		syscall
 		j notsametext
 		sametext:
 		####aynı
 		la $a0,sametxt
 		li $v0,4
 		syscall
 		notsametext:
 			
 		la $a0,line
 		li $v0,4
		syscall
		
 		addi $t0,$t0,1
 		addi $t1,$zero,0 #reset internal index 
 		addi $t7,$zero,0

 		j outerwhile
 		exitouter:
 		
 		
 		beq $t8,$zero,passthis
 		addi $t0,$zero,31
 		sub $t8,$t0,$t8
 		 lastelements:
 		 	beq $t8,$t0,passthis
 		 	lbu $t3,number2($t0)
 		 	addi $a0,$t3,0
 			li $v0,11
 			syscall
 		 	
 		 	addi $t0,$t0,-1
 		 	
 		 	j lastelements
 		 
 		passthis:
 		
  		jr $ra
 	
 	
 	
######



.data
array: .asciiz "123456"
array2: .asciiz "abcdef"
space: .asciiz " "
newLine: .asciiz "\n"

.text		
	.globl __start	

__start:

	size:
	lbu $s1,array($s0) #s0: string lenght
	beq $s1,$zero,done
	addi $s0,$s0,1
	j size
	done:      
	
	 #s0 size 
	 
	 la $a0,array    
	 la $a1,array2
	 add $a0,$a0,$s0
	 addi $a0,$a0,-1
	 jal reverseString	  
 	
 	addi $t1,$zero,0 #array index t1 now its zero to print 
	addi $a1,$zero,0  
 	jal print
	
	li $v0,10   #terminate program
	syscall
	
reverseString: 
	addi $sp,$sp,-12
	sw $ra,0($sp)
	sw $a0,4($sp)
	sw $a1,8($sp)
	
	beq $t1,$s0,out
	
	#do job
		
	addi $a1,$a1,1  
	addi $a0,$a0,-1
	addi $t1,$t1,1 
	       
	jal reverseString
	lw $a0,4($sp)
	lw $a1,8($sp)
	lbu  $t0,($a0)
	sb $t0,($a1)
	
	out: #base case
  	lw $ra,0($sp)
	lw $a0,4($sp)
	lw $a1,8($sp)
	addi $sp,$sp,12
	  
	jr $ra
	  
	  
	  
	  ################################
	
		print:
	       beq $a1,$s0,exit #t2 i t1 size
		lbu $t0,array2($t1)
		add $a0,$t0,$zero
	        li $v0,11	
	       syscall
	       la $a0,space
	       li $v0,4
	       syscall
	       addi $t1,$t1,1
	       addi $a1,$a1,1
	       j print
	       
	       exit: 
	       
	       jr $ra  
#############################

.text		
 	

	.globl _Lab3main
 


_Lab3main:		# execution starts here


	li $s0, 0	# initialize pointer storage register to 0 (=Null pointer)



	la $a0,msg110	# put msg110 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg110 string






##

##	Output the menu to the terminal,

##	   and get the user's choice

##

##



MenuZ:	
la $a0,msg111	# put msg111 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg111 string




	
la $a0,msg112	# put msg112 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg112 string




	
la $a0,msg113	# put msg113 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg113 string




	
la $a0,msg114	# put msg114 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg114 string




	
la $a0,msg115	# put msg115 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg115 string




	
la $a0,msg116	# put msg116 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg116 string




	
la $a0,msg117	# put msg117 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg117 string



	
la $a0,msg118	# put msg118 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg118 string





EnterChoice:

	
la $a0,msg119	# put msg119 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg119 string




	li $v0,5	# system call to read  
	

	syscall		# in the integer


	move $s1, $v0	# move choice into $s1





##

##

##	T1 through T7no use an if-else tree to test the user choice (in $s1)

##	   and act on it by calling the correct routine

##

##



T1:	bne $s1,1, T2	# if s1 = 1, do these things. Else go to T2 test

	jal create_list

	move $s0, $v0	# put pointer to linked list in s0 for safe storage
	
	addi $s3,$t0,-1 #s3 stores number of elements

	j MenuZ		# task is done, go to top of menu and repeat



T2:	bne $s1,2, T3	# if s1 = 2, do these things. Else go to T3 test

	move $a0, $s0	# put pointer to linked list in a0 before the call

	jal display_list 

	j MenuZ		# task is done, go to top of menu and repeat



T3:	bne $s1,3, T4	# if s1 = 3, do these things. Else go to T4 test

	move $a0,$s0  #pointer to list

	jal duplicatelist
	
	move $s0, $v1
	
	move $t4,$v0	
	
	move $a0, $t4	# put pointer to linked list in a0 before the call

	jal display_list 
	
	j MenuZ


T4:	
	bne $s1,4, T5	# if s1 = 4, do these things. Else go to T5 test

	la $a0,insertint	

	li $v0,4	# system call to print
	syscall		#   out the msg126 string

	li $v0,5	# system call to read  	
	syscall		#   in the value x
	
	move $a1, $v0	# integer to add
	
	la $a0,insertpos
	

	li $v0,4	# system call to print
	syscall	
	
		
	li $v0,5	# system call to read  
	syscall		#   in the value x
	
	move $a2, $v0	# position

	move $a0, $s0	# put pointer to linked list in a0 before the call

	jal Insert_n

	move $s0, $v1	# put the (possibly revised) pointer into s0


T5:	bne $s1,5, T6	# if s1 = 5, do these things. Else go to T6 test



T6:	
	bne $s1,6, T7	# if s1 = 6, do these things. Else go to T7 test
	

T7:	bne $s1,7, T7no	# if s1 = 7, do these things. Else go to T7no


	la $a0,msg127	# put msg127 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the thank you string


	li $v0,10
	# the exit syscall is 10

	syscall		# goodbye...



T7no:	
	la $a0,msg128	# put msg128 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg128 string

	j EnterChoice	# go to the place to enter the choice





##

##

##	ReportZ determines if the return value in $v0 is

##	   0 for success, -1 for failure, or other (invalid)

##

##



ReportZ: beq $v0,0,Succeed

	 beq $v0,-1,Fail



Invalid: la $a0,msg130  # put msg130 address into a0
	

	 li $v0,4	# system call to print
	

	 syscall	#   out the invalid message

	 j MenuZ	# task is done, go to top of menu and repeat

	

Succeed: la $a0,msg131  # put msg131 address into a0
	

	 li $v0,4	# system call to print
	

	 syscall	#   out the success message

	 j MenuZ	# task is done, go to top of menu and repeat



Fail:	 la $a0,msg132  # put msg132 address into a0
	

	 li $v0,4	# system call to print
	

	 syscall	#   out the failure message

	 j MenuZ	# task is done, go to top of menu and repeat

	
	






###################################################################

##

#### create_list - a linked list utility routine, 

##			which creates the contents, element 

##			by element, of a linked list

##

##	a0 - used for input arguments to syscalls

##	s0 - holds final value of pointer to linked list (to be put in v0 at exit)

##	t0 - temp value, holds # of current element being created; is loop control variable

##	t1 - temp value, holds n+1, where n is the user input for length of list

##	s1 - value of pointer to current element

##	s2 - value of pointer to previous element

##	v0 - used as input value for syscalls (1, 4, 5 and 9),

##		but also for the return value, to hold the address of the 

##		first element in the newly-created linked list

##	sp - stack pointer, used for saving s-register values on stack

##

##################################################################   




create_list:		# entry point for this utility routine

	addi $sp,$sp,-12 # make room on stack for 3 new items
	

	sw $s0, 8 ($sp) # push $s0 value onto stack
	

	sw $s1, 4 ($sp) # push $s1 value onto stack
	

	sw $s2, 0 ($sp) # push $s2 value onto stack
	

	



	la $a0, msg91	# put msg91 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg91 string

	



	la $a0, msg92	# put msg92 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg92 string

	



	li $v0,5	# system call to read  
	

	syscall		#   in the integer
	



	addi $t1,$v0,1	# put limit value of n+1 into t1 for loop testing

	



	bne $v0, $zero, devam90 #if n = 0, finish up and leave !!!!!!!!!!!!!!!!!!!!!!!!

	



	la $a0, msg93	# put msg93 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg93 string

	



	move $s0, $zero # the pointer to the 0-element list will be Null !!!!!!!!!!!!!!!!!!f
	

	j Finish90	# 
	






devam90:		# continue here if n>0
	

	li $t0, 1	# t=1

	

	li $a0, 16	# get 16 bytes of heap from OS
	

	li $v0, 9	# syscall for sbrk (dynamic memory allocation)
	

	syscall
	



	move $s0, $v0	# the final value of list pointer is put in $s0
	

	move $s1, $v0	# the pointer to the current element in the list is put in $s1
	

	j Prompt90	# 
		




Top90:	move $s2, $s1	# pointer to previous element is updated with pointer to current element

	

	

	sll $t2,$t0,4	# $t2 is 16 x the number of the current element ($t0)
	

	move $a0, $t2	# get $t2 bytes of heap from OS
	

	li $v0, 9	# syscall for sbrk (dynamic memory allocation)
	

	syscall
	



	move $s1, $v0	# the pointer to the new current element in the list is put in $s1
	

	sw $s1, 0($s2)	# the previous element's pointerToNext is loaded with the new element's address

	



Prompt90: la $a0,msg94	# put msg94 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg94 string

	



	move $a0, $t0	# put x (the current element #) in $a0
	

	li $v0,1	# system call to print
	

	syscall		#   out the integer in $a0

	

	

	la $a0, msg95	# put msg95 address into a0
	

	li $v0,4	# system call to print
	

	syscall		#   out the msg95 string

	



	li $v0, 5	# system call to read in  
	

	syscall		#   the integer from user
	

	sw $v0, 4($s1) 	# store the value from user into

 
			#   current element's value part


	



	addi $t0,$t0,1	# x = x+1  increment element count
	

	bne $t0,$t1, Top90 # If x != n+1, go back to top of loop and iterate again


   
	

	sw $0,0($s1)	# Put Null value into pointerToNext part of last element in list

	





Finish90: move $v0,$s0	# put pointer to linked list in $v0 before return

	

	lw $s0, 8 ($sp) # restore $s0 value from stack
	

	lw $s1, 4 ($sp) # restore $s1 value from stack
	

	lw $s2, 0 ($sp) # restore $s2 value from stack
		

	addi $sp,$sp,12 # restore $sp to original value (i.e. pop 3 items)
	

	jr $ra		# return to point of call






##################################################################

#### display_list - a linked list utility routine, 

##			which shows the contents, element 

##			by element, of a linked list

##

##	a0 - input argument: points to the linked list, i.e. contains

##		the address of the first element in the list

##	s0 - current pointer, to element being displayed

##	s1 - value of pointerToNext part of current element

##	v0 - used only as input value to syscalls (1, 4, and 34)

##	sp - stack pointer is used, for protecting s0 and s1

##

################################################################# 

  



display_list:		# entry point for this utility routine

	

	addi $sp, $sp,-8 # make room on stack for 2 new items
	

	sw $s0, 4 ($sp) # push $s0 value onto stack
	

	sw $s1, 0 ($sp) # push $s1 value onto stack



	

	move $s0, $a0	# put the pointer to the current element in $s0
	



	la $a0, msg81	# put msg81 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg81 string

	



	bne $s0, $zero, devam80	# if pointer is NULL, there is no list

	



	la $a0, msg82	# put msg82 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg82 string
	

	j Return80	# done, so go home





devam80:		# top of loop	
	

	la $a0, msg83	# put msg83 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg83 string

	

	

	lw $s1, ($s0)	# read the value of pointerToNext
	

	move $a0, $s1	# put the pointerToNext value into a0
	

	li $v0, 34	# system call to print out the integer 
	

	syscall		#   in hex format

	



	la $a0, msg84	# put msg84 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg84 string

	



	lw $a0, 4($s0)	# read the value part, put into a0
	

	li $v0, 1	# system call to print  
	

	syscall		#   out the integer

	



	la $a0, msg85	# put msg85 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg85 string (new line)





Top80:	beq $s1, $zero, Return80 # if pointerToNext is NULL, there are no more elements

	

	

	la $a0, msg86	# put msg86 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg86 string

	



	move $s0, $s1	# update the current pointer, to point to the new element

	

	lw $s1, ($s0)	# read the value of pointerToNext in current element
	

	move $a0, $s1	# put the pointerToNext value into a0
	

	li $v0, 34	# system call to print out the integer 
	

	syscall		#   in hex format

	



	la $a0, msg84	# put msg84 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg84 string

	



	lw $a0, 4($s0)	# read the value part, put into a0
	

	li $v0, 1	# system call to print  
	

	syscall		#   out the integer

	



	la $a0, msg85	# put msg85 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg85 string (new line)

	



	j Top80		# go back to top of loop, to test and

 
			#   possibly iterate again





Return80:	
	

	la $a0, msg89	# put msg89 address into a0
	

	li $v0, 4	# system call to print
	

	syscall		# out the msg89 string

	



	lw $s0, 4 ($sp) # restore $s0 value from stack
	

	lw $s1, 0 ($sp) # restore $s1 value from stack
	

	addi $sp, $sp, 8 # restore $sp to original value (i.e. pop 2 items)
	

	jr $ra		# return to point of call







#################################################

##

##

##	dummy routines for the 4 utilities which

##	  students should write for Lab3

##

##

###############################################
#
duplicatelist:

	addi $sp, $sp,-8 # make room on stack for 2 new items
	

	sw $s0, 4 ($sp) # push $s0 value onto stack
	

	sw $s1, 0 ($sp) # push $s1 value onto stack
	
	move $s0, $a0	# put the pointer to the current element in $s0

		
	bne $s0, $zero, devamduplicate	# if pointer is NULL, there is no list

	la $a0, msg82	# its in the given code - put msg82 address into a0 NULL POINTER EROR
	li $v0, 4	# system call to print	
	syscall		#   out the msg82 string

	j Returnduplicate	# done, so go home


	devamduplicate:	
				# top of loop	
	addi $t9,$zero,0  #will be used for index
	
	lw $s1, ($s0)
	
	whilecreate:
	
		beq $t9,$s3,stopcreate  #when index is equal to list size	
	
		li $a0, 16	# get 16 bytes of heap from OS	

		li $v0, 9	# syscall for sbrk (dynamic memory allocation)
		syscall
	
		move $t8, $v0# the final value of list pointer is put in $s0
		
		beq $t9,0,storehead
		sw $t8,0($t5)
		move $t5,$t8
		
		j passstorehead
		storehead:
		addi $t5,$t8,0
		addi $t4,$t5,0
		passstorehead:
		
		addi $t9,$t9,1
	
	j whilecreate
	
	stopcreate:
	
	addi $t6,$t4,0
	lw $t5, ($t4)

	Topcreate:	
	
#	beq $s1, $zero, Returnduplicate# if pointerToNext is NULL, there are no more elements
	
	lw $t8,4($s0)
	sw $t8,4($t4)
	
	beq $s1, $zero, passReturnduplicate
	
	move $s0, $s1	# update the current pointer, to point to the new element
	lw $s1,0($s0)
	
	move $t4,$t5
	lw $t5,0($t4)
	j pass2Returnduplicate
	passReturnduplicate:
		lw $t8,4($s0)
		sw $t8,4($t4)
		j Returnduplicate
	pass2Returnduplicate:
	
	j Topcreate
	
	
Returnduplicate:	
	
	lw $s0, 4 ($sp) # restore $s0 value from stack
	

	lw $s1, 0 ($sp) # restore $s1 value from stack
	

	addi $sp, $sp, 8 # restore $sp to original value (i.e. pop 2 items)
	

	move $v1, $s0  #return original list pointer
	
	move $v0, $t6 #return duplicate one

	jr $ra		# return to point of call
	
	

jr $ra


##############################################

Insert_n:
	

	addi $sp, $sp,-8 # make room on stack for 2 new items
	

	sw $s0, 4 ($sp) # push $s0 value onto stack
	

	sw $s1, 0 ($sp) # push $s1 value onto stack
	

	move $s0, $a0	# put the pointer to the current element in $s0



	bne $s0, $zero, devaminsert	# if pointer is NULL, there is no list

	
	la $a0, msg82	# its in the given code - put msg82 address into a0 NULL POINTER EROR
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg82 string
	

	j Returninsert	# done, so go home


devaminsert:		# top of loop	
	addi $t9,$zero,2 #index	
	
	lw $s1, ($s0)
	
	li $a0, 16	# get 16 bytes of heap from OS
	

	li $v0, 9	# syscall for sbrk (dynamic memory allocation)
	

	syscall
	
	move $t8, $v0# the final value of list pointer is put in $s0
	
	sw $a1, 4($t8)	#store value into new node


Topinsert:	
	
	beq $s1, $zero, Returninsert# if pointerToNext is NULL, there are no more elements

	beq $a2,1,head
	
	beq $t9,$a2,list
	
	
	j passlist
	
	# s0  points to current node and s1 points to next
	list:  	
		sw $s1,0($t8)
		sw $t8,0($s0)
		move $s1,$t8
		
	passlist:
			
	move $s0, $s1	# update the current pointer, to point to the new element

	
	lw $s1,0($s0)	# read the value of pointerToNext in current element
	
	addi $t9,$t9,1
	
	j Topinsert
	

Returninsert:	
	bge $a2,$t9,last
	j passlast
	last:
		sw $t8,0($s0)
		sw $zero,0($t8)
				
	passlast:
	
	lw $s0, 4 ($sp) # restore $s0 value from stack
	

	lw $s1, 0 ($sp) # restore $s1 value from stack
	

	addi $sp, $sp, 8 # restore $sp to original value (i.e. pop 2 items)
	
	j passhead
	
	head:  	
		sw $s0,0($t8)
		move $s0,$t8
	passhead:	
	
	addi $s3,$s3,1

	move $v1, $s0  #return original list pointer

	jr $ra		# return to point of call

	



################################################

#
#

#
#     	 	data segment			

#
#						

#
#

################################################



	 .data


msg81:	 .asciiz "This is the current contents of the linked list: \n"


msg82:   .asciiz "No linked list is found, pointer is NULL. \n"


msg83:   .asciiz "The first node contains:  pointerToNext = "


msg84:   .asciiz ", and value = "


msg85:   .asciiz "\n"


msg86:   .asciiz "The next node contains:  pointerToNext = "


msg89:   .asciiz "The linked list has been completely displayed. \n"


msg91:	 .asciiz "This routine will help you create your linked list. \n"


msg92:   .asciiz "How many elements do you want in your linked list? Give a non-negative integer value: 0, 1, 2, etc.\n"


msg93:   .asciiz "Your list is empty, it has no elements. Also, it cannot not be displayed. \n"


msg94:   .asciiz "Input the integer value for list element #"


msg95:   .asciiz ": \n"




msg110:  .asciiz "Welcome to the Lab3 program about linked lists.\n"


msg111:  .asciiz "Here are the options you can choose: \n"

msg112:  .asciiz "1 - create a new linked list \n"

msg113:  .asciiz "2 - display the current linked list \n"

msg114:  .asciiz "3 - Duplicate List\n"

msg115:  .asciiz "4 - insert element into linked list at position n  \n"

msg116:  .asciiz "5 - delete element at position n from linked list \n"

msg117:  .asciiz "6 - delete element from linked list with value x \n"

msg118:  .asciiz "7 - exit this program \n"

msg119:  .asciiz "Enter the integer for the action you choose:  "

msg120:  .asciiz "Enter the integer value of the element that you want to insert:  "

msg124:  .asciiz "Enter the position number in the linked list where you want to insert the element:  "	

msg125:  .asciiz "Enter the position number in the linked list of the element you want to delete:  "

msg126:  .asciiz "Enter the integer value of the element that you want to delete:  "



msg127:  .asciiz "Thanks for using the Lab3 program about linked lists.\n"


msg128:  .asciiz "You must enter an integer from 1 to 7. \n"

msg130:  .asciiz "The return value was invalid, so it isn't known if the requested action succeeded or failed. \n"	

msg131:  .asciiz "The requested action succeeded. \n"

msg132:  .asciiz "The requested action failed. \n"

insertint: .asciiz "Enter integer to insert: "

insertpos: .asciiz "Enter Position: "
  

##


## end of file Lab3main.txt
##SK


##########################P
#PRECODES


.data
string: .asciiz "12045"

.text
	.globl _start
_start:

#this part calculates the lenght of the string
size:
	lbu $s1,string($s0) #s0: string lenght
	beq $s1,$zero,done #if its null terminator
	addi $s0,$s0,1
	j size
	done:
	
la $a0,string
add $s0,$s0,$a0

la $a0,string
jal recursive

add $a0,$v0,$zero
li $v0,1
syscall

li $v0,10
syscall

recursive:
	addi $sp,$sp,-8
	sw $t0,0($sp) #saving to stack since its value shouldnt change during execution (recursive returning)
	sw $ra,4($sp)
	
	beq $a0,$s0,donef
	
	#Do job
	move $t0,$a0
	addi $a0,$a0,1
	jal recursive
	lbu $t1,0($t0)
	addi $t1,$t1,-48 #convert ascii to decimal
	add $v0,$v0,$t1
	
	donef:
		lw $t0,0($sp)
		lw $ra,4($sp)
		addi $sp,$sp,8
		addi $v0,$v0,0
		jr $ra
	
#########################


Delete_x:	#this subprogram works with given linked list main menu provided that:
		# move $a1, $v0 (v0 is x taken from user)	
		# move $a0, $s0 before jal Delete_x
		#it gives num of elements in v0 and also list pointer in v1

	

	addi $sp, $sp,-8 # make room on stack for 2 new items
	

	sw $s0, 4 ($sp) # push $s0 value onto stack
	

	sw $s1, 0 ($sp) # push $s1 value onto stack


	addi $t4,$zero,0 #number of elements that deleted
	

	move $s0, $a0	# put the pointer to the current element in $s0



	bne $s0, $zero, devam88	# if pointer is NULL, there is no list

	



	la $a0, msg82	# its in the given code - put msg82 address into a0 NULL POINTER EROR
	

	li $v0, 4	# system call to print
	

	syscall		#   out the msg82 string
	

	j Return88	# done, so go home


devam88:		# top of loop	
		

	lw $s1, ($s0)	# read the value of pointerToNext


	lw $t5, 4($s0)	# read the value part, put into a0
	
	beq $t5,$a1,deletenext # it allows to delete the elements after first number
	







Top88:	beq $s1, $zero, Return88# if pointerToNext is NULL, there are no more elements



	move $s0, $s1	# update the current pointer, to point to the new element

	

	lw $s1, ($s0)	# read the value of pointerToNext in current element
		

	lw $t5, 4($s0)	# read the value part, put into a0

	beq $t5,$a1,deletenext
	
	j deletepass
	
	deletenext:   #connects the current node’s next pointer to the node which occurs after deleted node

		beq $s1,$zero,remain #if its last element dont change list
		lw $t6,($s1)
		sw $t6, ($s0)
		lw $s1,($s0)
		addi $t4,$t4,1
	remain:
	
	deletepass:

	j Top88  	# go back to top of loop

Return88:	

	lw $s0, 4 ($sp) # restore $s0 value from stack
	

	lw $s1, 0 ($sp) # restore $s1 value from stack
	

	addi $sp, $sp, 8 # restore $sp to original value (i.e. pop 2 items)
	
	move $v0, $t4   #return number of deleted elements
	move $v1, $s0  #return original list pointer

	jr $ra		# return to point of call
